BeanPostProcessor
FactoryBean
SpEL (Spring Expresson Language)
Proxies
Profiles (Configurations based on environment)
=======================

Bean lifecylcle

Intantiation -> Read properties -> sets BeanName -> BeanFactory Aware ->
Pre-Initialization(BeanPostProcssors) -> InitializeBean -> initMethod -> Post Initialization (BeanPostProcessors)

------
PostConstruct annotation can be used to updaet bean immediately after bean constrcutor is created
----

FactoryBean:

Builds on FactoryMethod design pattern
Helps to use the Legacy code.
How means: Extend FactoryBean interface for this legacy code and
   add the functions if you want more functionality on top of that

Where you are using:

Declare a Bean with that name and


---
SpEL (Spring Expression lanuage)
used to Manipulated Object Graph after object is created
can evaluate values in runtime
can manipulate configuration
This will be caliculated on RunTime and act based on the implementation.
Typical use case is: Adding salt to passwords, manipulate the list on timely manner, etc.

Will be done by using the " @Value" Annotation

-----

Spring AOP Proxies:
Sprint utilizes Proxy.
when -> when dealing with DB with @Transactional.
--
Bean Profiles: just explanation
- Adapt to environments so that it can run only in specific environment
- used for effective runtime configuration
- Ex: @Profile("dev") - String can be anything but this will be used along with spring.profiles.active
- After adding above info in appropriate class : To run Add -Dspring.profiles.active=dev in VM Options in run configuration
- example Add profiles as below samples but did not test and run with -Dspring.profiles.active=dev in VM Options

            @Profile("dev")
            public class HibernateSpeakerRepositoryImpl implements SpeakerRepository {


            }

            and

            @Profile("dev")
            public class SpeakerServiceImpl implements SpeakerService {


            }